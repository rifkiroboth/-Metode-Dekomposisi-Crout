import numpy as np

# Fungsi untuk melakukan dekomposisi Crout
def dekomposisi_Crout(A):
    n = len(A)
    L = np.zeros((n, n))
    U = np.zeros((n, n))

    for j in range(n):
        U[j][j] = 1
        for i in range(j, n):
            sum_1 = sum(L[i][k] * U[k][j] for k in range(i))
            L[i][j] = A[i][j] - sum_1
        for i in range(j, n):
            sum_2 = sum(L[j][k] * U[k][i] for k in range(j))
            U[j][i] = (A[j][i] - sum_2) / L[j][j]
    return L, U

# Fungsi untuk mencari solusi dengan dekomposisi Crout
def solusi_Crout(A, b):
    L, U = dekomposisi_Crout(A)
    y = np.linalg.solve(L, b)
    x = np.linalg.solve(U, y)
    return x

# Contoh penggunaan
A = np.array([[2, 1, -1],
              [1, 3, 2],
              [1, 2, 1]])
b = np.array([[-3],
              [9],
              [8]])

x = solusi_Crout(A, b)
print("Solusi menggunakan metode dekomposisi Crout:")
print(x)
